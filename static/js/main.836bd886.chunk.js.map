{"version":3,"sources":["logo.svg","containers/TechList.js","containers/DetailList.js","containers/Works.js","graphql/queries.js","containers/Intro.js","containers/Experience.js","containers/SkillSingleElement.js","containers/Visit.js","containers/Skills.js","containers/Presentation.js","containers/Test.js","App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["module","exports","TechList","props","state","className","this","tech_list","map","tech","Component","DetailList","element","Array","isArray","subtitle","length","i","push","content","ele","name","Works","works","API","graphql","graphqlOperation","allworks","data","sort","a","b","period","setState","work","deco","key","id","title","introduction","href","git_url","target","detail_url","Intro","job","email","position","blog","github","Experience","experiences","qeury_result","activities","act","SkillSingleElement","skill_name","lang_list","Visit","today","total","Presentation","presentations","peroid","App","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.836bd886.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\r\n\r\n\r\nimport './TechList.css'\r\n\r\n\r\nexport default class TechList extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"tech_container\">\r\n        {this.props.tech_list.map(tech =>{\r\n          return(\r\n              <a className=\"tech_element\">{tech}</a>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\n\r\nimport './DetailList.css'\r\n\r\n\r\nexport default class DetailList extends Component{\r\n\r\n  render(){\r\n    const element = []\r\n    if (Array.isArray(this.props.subtitle) && this.props.subtitle.length){\r\n      for(let i =0; i <this.props.subtitle.length; i++){\r\n        element.push({subtitle:this.props.subtitle[i], content:this.props.content[i]})\r\n      }\r\n  \r\n  }\r\n    return (\r\n      <div className=\"tech_container\">\r\n\r\n        { element.map(ele =>{\r\n          return(\r\n              <div>\r\n              <div className=\"detail_subtitle\">{ele.subtitle}</div>\r\n              <div className=\"detail_content\">{ele.content}</div>\r\n              </div>\r\n            )\r\n        })}\r\n\r\n        <p>{this.props.name}</p>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\nimport './Works.css'\r\n\r\nimport TechList from './TechList'\r\nimport DetailList from './DetailList'\r\n\r\nexport default class Works extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      works: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const allworks = await API.graphql(graphqlOperation(queries.listArts));\r\n    let data = allworks['data']['listArts']['items'];\r\n\r\n    data.sort(function(a, b){\r\n      return a.period < b.period ? -1 : a.period > b.period ? 1 : 0; \r\n    });\r\n\r\n    this.setState({works : data})    \r\n  }\r\n  \r\n\r\n  render(){\r\n    return (\r\n      <div className=\"works\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Works </span>\r\n\r\n          {this.state.works.map(work => {\r\n            return(\r\n              <div className=\"experience_element\">\r\n                <p className=\"element_decoration\">{work.deco}</p>\r\n                <h3 className=\"element_heading\" key={work.id}>{work.title}</h3>\r\n                <p className=\"element_period\">({work.period})</p>\r\n                <TechList tech_list={work.tech}/>\r\n                <p className=\"element_title\">{work.introduction}</p>\r\n                <DetailList subtitle={work.subtitle} content={work.content}/>\r\n                <a href ={work.git_url} className=\"experience_element_git_url\" target=\"_blank\">{work.git_url}</a><br/>\r\n                <a href ={work.detail_url} className=\"experience_element_git_url\" target=\"_blank\">{work.detail_url}</a>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = `query GetTodo($id: ID!) {\n  getTodo(id: $id) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const listTodos = `query ListTodos(\n  $filter: ModelTodoFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      name\n      description\n    }\n    nextToken\n  }\n}\n`;\nexport const getTest = `query GetTest($id: ID!) {\n  getTest(id: $id) {\n    id\n    title\n  }\n}\n`;\nexport const listTests = `query ListTests(\n  $filter: TableTestFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listTests(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n    }\n    nextToken\n  }\n}\n`;\nexport const getCoffee = `query GetCoffee($id: ID!) {\n  getCoffee(id: $id) {\n    id\n    title\n  }\n}\n`;\nexport const listCoffees = `query ListCoffees(\n  $filter: TableCoffeeFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listCoffees(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n    }\n    nextToken\n  }\n}\n`;\nexport const getExperience = `query GetExperience($id: ID!) {\n  getExperience(id: $id) {\n    id\n    title\n    subtitle\n    content\n    period\n  }\n}\n`;\nexport const listExperiences = `query ListExperiences(\n  $filter: TableExperienceFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listExperiences(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n      subtitle\n      content\n      period\n    }\n    nextToken\n  }\n}\n`;\nexport const getPresentation = `query GetPresentation($id: ID!, $period: AWSDateTime!) {\n  getPresentation(id: $id, period: $period) {\n    id\n    title\n    content\n    period\n  }\n}\n`;\nexport const listPresentations = `query ListPresentations(\n  $filter: TablePresentationFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listPresentations(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n      content\n      period\n    }\n    nextToken\n  }\n}\n`;\nexport const getFresentation = `query GetFresentation($id: ID!) {\n  getFresentation(id: $id) {\n    id\n    title\n    content\n    peroid\n  }\n}\n`;\nexport const listFresentations = `query ListFresentations(\n  $filter: TableFresentationFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listFresentations(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n      content\n      peroid\n    }\n    nextToken\n  }\n}\n`;\nexport const getWork = `query GetWork($id: ID!) {\n  getWork(id: $id) {\n    id\n    title\n    tech\n    content\n    learnt\n    git_url\n    period\n    detail_url\n  }\n}\n`;\nexport const listWorks = `query ListWorks(\n  $filter: TableWorkFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listWorks(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n      tech\n      content\n      learnt\n      git_url\n      period\n      detail_url\n    }\n    nextToken\n  }\n}\n`;\nexport const getDetail = `query GetDetail($id: ID!) {\n  getDetail(id: $id) {\n    id\n    title\n    content\n  }\n}\n`;\nexport const listDetails = `query ListDetails(\n  $filter: TableDetailFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listDetails(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n      content\n    }\n    nextToken\n  }\n}\n`;\nexport const getProject = `query GetProject($id: ID!) {\n  getProject(id: $id) {\n    id\n    decoration\n    period\n    title\n    tech\n    introduction\n    content {\n      id\n      title\n      content\n    }\n    git_url\n    detail_url\n  }\n}\n`;\nexport const listProjects = `query ListProjects(\n  $filter: TableProjectFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listProjects(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      decoration\n      period\n      title\n      tech\n      introduction\n      content {\n        id\n        title\n        content\n      }\n      git_url\n      detail_url\n    }\n    nextToken\n  }\n}\n`;\nexport const getMyself = `query GetMyself($id: ID!) {\n  getMyself(id: $id) {\n    id\n    deco\n    period\n    title\n    tech\n    introduction\n    content\n    git_url\n    detail_url\n  }\n}\n`;\nexport const listOurselves = `query ListOurselves(\n  $filter: TableMyselfFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listOurselves(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      deco\n      period\n      title\n      tech\n      introduction\n      content\n      git_url\n      detail_url\n    }\n    nextToken\n  }\n}\n`;\nexport const getArt = `query GetArt($id: ID!) {\n  getArt(id: $id) {\n    id\n    deco\n    period\n    title\n    tech\n    introduction\n    subtitle\n    content\n    git_url\n    detail_url\n  }\n}\n`;\nexport const listArts = `query ListArts($filter: TableArtFilterInput, $limit: Int, $nextToken: String) {\n  listArts(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      deco\n      period\n      title\n      tech\n      introduction\n      subtitle\n      content\n      git_url\n      detail_url\n    }\n    nextToken\n  }\n}\n`;\n","import React, {Component} from \"react\";\r\nimport \"./Intro.css\"\r\n\r\nexport default class Intro extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      name : \"Lee Yeong-Min\",\r\n      job: \"Developer\",\r\n      email : \"demonic3540@naver.com\",\r\n      position: \"Student\",\r\n      blog: \"https://blog.naver.com/demonic3540\",\r\n      github : \"https://github.com/horoyoii\",\r\n      content: \"I have very few knowledge of CS, which means there are so many things left to be DISCOVERED by me. This is great.\",\r\n      subtitle: \"I always think : What will I develop tomorrow?\"\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"Intro\">\r\n        <div className=\"lander\">\r\n          <div className=\"header-deco\"/>\r\n\r\n          <h1>{this.state.name}</h1>\r\n          <p className=\"sub_heading\">{this.state.job}</p>\r\n\r\n          <span className=\"sub_info\">github : <a href={this.state.github} target=\"_blank\">{this.state.github}</a></span>\r\n          <span className=\"sub_info\">blog : <a href={this.state.blog} target=\"_blank\" >{this.state.blog}</a></span>\r\n          <span className=\"sub_info\">email : <a href={this.state.email} target=\"_blank\">{this.state.email}</a></span>\r\n\r\n          <p className=\"intro_content\">{this.state.content}</p>\r\n          <p className=\"intro_content\">{this.state.subtitle}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\n\r\nimport './Experience.css'\r\n\r\nexport default class Experience extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      experiences: []\r\n    };\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n    \r\n    const qeury_result = await API.graphql(graphqlOperation(queries.listExperiences));\r\n    let activities = qeury_result['data']['listExperiences']['items']\r\n\r\n    \r\n    activities.sort(function (a, b) {\r\n      return a.period < b.period ? -1 : a.period > b.period ? 1 : 0; \r\n    });\r\n\r\n    this.setState({experiences : activities})\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"experience\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Experience </span>\r\n        {this.state.experiences.map(act => {\r\n          return(\r\n            <div className=\"activity_element\">\r\n              <div className=\"activity-content\">\r\n                <h3 className=\"activity_heading\" key={act.id}>{act.title}</h3>\r\n                <div className=\"activity-subheading\">{act.subtitle}</div>\r\n                <p className=\"activity-content\">{act.content}</p>\r\n              </div>\r\n              <div className=\"activity_date\">\r\n                <span className=\"activity-text\">{act.period}</span>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\n\r\nimport './SkillSingleElement.css'\r\n\r\nexport default class SkillSingleElement extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n\r\n  }\r\n\r\n//   async componentDidMount() {\r\n//     //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n//     const allworks = await API.graphql(graphqlOperation(queries.listLanguages));\r\n//     let get_experiences = allworks['data']['listLanguages']['items']\r\n// //    console.log(allworks['data']);\r\n//\r\n//   }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"skill_element\">\r\n        <span className=\"skill_subheading\">{this.props.skill_name}</span>\r\n\r\n        {this.props.lang_list.map(tech =>{\r\n          return(\r\n              <a className=\"tech_element\">{tech}</a>\r\n          )\r\n        })}\r\n\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\n\r\nimport './Visit.css'\r\nexport default class Visit extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      today : 0,\r\n      total : 0\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    /*\r\n    const res = await API.graphql(graphqlOperation(queries.updateVisitors,  {\r\n    \"var\": {\r\n      \"id\": \"723e2b0d-8478-48f7-9802-cf1d38f7f303\"\r\n    }\r\n    }));\r\n\r\n    console.log(\"================\");\r\n    console.log(res['data']['updateVisitors']['m_today']);\r\n    console.log(res['data']['updateVisitors']['m_total']);\r\n\r\n    // get_experiences.map(ex =>{\r\n    //   this.state.tmp_list.push(ex.title);\r\n    // })\r\n    //\r\n    this.setState({\r\n      today : res['data']['updateVisitors']['m_today'],\r\n      total : res['data']['updateVisitors']['m_total']\r\n  })\r\n    */\r\n   \r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"Visit\">\r\n        <p>Today : {this.state.today} / Total : {this.state.total}</p>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\nimport './Skills.css'\r\nimport SkillSingleElement from './SkillSingleElement'\r\n\r\nexport default class Skills extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      tmp_list: [],\r\n      back_list:[\"Django\", \"go-gin\"],\r\n      db_list:[\"MySQL\", \"MariaDB\", \"aws DynamoDB\", \"SQLite3\", \"Redis\",\"Firebase RT db\"],\r\n      front_list:[\"React\", \"QT5\"],\r\n      cloud_list:[\"aws Lamdba\", \"aws S3\", \"google app script\",\"aws AppSync\"],\r\n      etc_list:[\"docker-compose\", \"serverless framework\", \"GraphQL\"],\r\n      mobile_list:[\"Android\"]\r\n    };\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n    /*\r\n    const allworks = await API.graphql(graphqlOperation(queries.listLanguages));\r\n    let get_experiences = allworks['data']['listLanguages']['items']\r\n    console.log(allworks['data']);\r\n    console.log(get_experiences);\r\n\r\n    get_experiences.map(ex =>{\r\n      this.state.tmp_list.push(ex.title);\r\n    })\r\n    */\r\n    this.setState({lang_list : this.state.tmp_list})\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"experience\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Skills </span>\r\n        <SkillSingleElement skill_name=\"Language\" lang_list={this.state.tmp_list}/>\r\n        <SkillSingleElement skill_name=\"Backend\" lang_list={this.state.back_list}/>\r\n        <SkillSingleElement skill_name=\"Database\" lang_list={this.state.db_list}/>\r\n        <SkillSingleElement skill_name=\"Frontend\" lang_list={this.state.front_list}/>\r\n        <SkillSingleElement skill_name=\"Cloud Service\" lang_list={this.state.cloud_list}/>\r\n        <SkillSingleElement skill_name=\"Mobile\" lang_list={this.state.mobile_list}/>\r\n        <SkillSingleElement skill_name=\"ETC\" lang_list={this.state.etc_list}/>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\n\r\nimport './Experience.css'\r\n\r\nexport default class Presentation extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      presentations: []\r\n    };\r\n\r\n  }\r\n\r\n  async componentDidMount() {    \r\n    const qeury_result = await API.graphql(graphqlOperation(queries.listFresentations));\r\n    \r\n    this.setState({presentations : qeury_result['data']['listFresentations']['items']})\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"experience\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Presentation </span>\r\n        {this.state.presentations.map(act => {\r\n          return(\r\n            <div className=\"activity_element\">\r\n              <div className=\"activity-content\">\r\n                <h3 className=\"activity_heading\" key={act.id}>{act.title}</h3>\r\n                <div className=\"activity-subheading\"></div>\r\n                <p className=\"activity-content\">{act.content}</p>\r\n              </div>\r\n              <div className=\"activity_date\">\r\n                <span className=\"activity-text\">{act.peroid}</span>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\nimport './Works.css'\r\n\r\nimport TechList from './TechList'\r\n\r\nexport default class Test extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      experiences: []\r\n    };\r\n\r\n    this.handleChange =this.handleChange.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n    \r\n    const allworks = await API.graphql(graphqlOperation(queries.listTodos));\r\n    let get_experiences = allworks['data']['listTodos']['items']\r\n    console.log(allworks['data']);\r\n\r\n    this.setState({experiences : get_experiences})\r\n    \r\n  }\r\n\r\n  async updateName(event){\r\n\r\n    /*\r\n    const allTodos = await API.graphql(graphqlOperation(queries.listMadens));\r\n    console.log(allTodos);\r\n\r\n    event.preventDefault();\r\n    */\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({\r\n      value : event.target.value\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"works\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Test </span>\r\n\r\n          {this.state.experiences.map(exp => {\r\n            return(\r\n              <div className=\"experience_element\">\r\n                <h3 className=\"element_heading\" key={exp.id}>{exp.name}</h3>\r\n                <p className=\"element_content\">{exp.description}</p>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Works from './containers/Works'\nimport Intro from './containers/Intro'\nimport TechList from './containers/TechList'\nimport Experience from './containers/Experience'\nimport Skills from './containers/Skills'\nimport Visit from './containers/Visit'\nimport Test from './containers/Test'\nimport Presentation from './containers/Presentation'\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Visit/>\n      <Intro/>\n      <Experience/>\n      <Presentation/>\n      <Works/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-northeast-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://lypf62zedbgcbk3n6vbczlcs3a.appsync-api.ap-northeast-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"ap-northeast-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-snwmav6w5fe4zgkw4fmlnil6yi\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}