{"version":3,"sources":["logo.svg","containers/TechList.js","containers/Works.js","containers/Intro.js","containers/Experience.js","containers/SkillSingleElement.js","containers/Skills.js","containers/Visit.js","containers/Test.js","graphql/queries.js","App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["module","exports","TechList","props","state","className","this","tech_list","map","tech","Component","Works","name","email","value","experiences","handleChange","bind","event","setState","target","exp","key","id","title","content","href","git_url","Intro","job","position","blog","github","Experience","act","subtitle","period","SkillSingleElement","skill_name","lang_list","Skills","tmp_list","back_list","db_list","front_list","cloud_list","etc_list","mobile_list","Visit","today","total","Test","API","graphql","graphqlOperation","allworks","get_experiences","console","log","description","App","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c6efc78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\r\n\r\n\r\nimport './TechList.css'\r\n\r\n\r\nexport default class TechList extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"tech_container\">\r\n        {this.props.tech_list.map(tech =>{\r\n          return(\r\n              <a className=\"tech_element\">{tech}</a>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\nimport './Works.css'\r\n\r\nimport TechList from './TechList'\r\n\r\nexport default class Works extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      name : \"dafuault name\",\r\n      email : \"demonI@anaewf.com\",\r\n      value : '',\r\n      experiences: []\r\n    };\r\n\r\n    this.handleChange =this.handleChange.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n    /*\r\n    const allworks = await API.graphql(graphqlOperation(queries.listMadens));\r\n    let get_experiences = allworks['data']['listMadens']['items']\r\n    console.log(allworks['data']);\r\n\r\n    this.setState({experiences : get_experiences})\r\n    */\r\n\r\n    //##################################################\r\n    // Mutation in React with graphql api\r\n    //##################################################\r\n    /*\r\n    GraphQl Client로는 Apollo 가 있으나, 나의 경우 aws appsync 서비스를 이용하였고,\r\n    aws에서 만든 aws amplify GraphQl을 Graphql Client로서 사용하였다.\r\n\r\n    */\r\n\r\n    // https://hackernoon.com/introducing-the-aws-amplify-graphql-client-8a1a1e514fde\r\n    // let title = \"Fitfh\";\r\n    // let content = \"Helllllll5l5l5l5l5l\";\r\n    //\r\n    // const cr = await API.graphql(graphqlOperation(queries.createWork,  {\r\n    // \"var\": {\r\n    // \"title\": title,\r\n    // \"content\": content\r\n    // }\r\n    // }));\r\n\r\n  }\r\n\r\n  async updateName(event){\r\n\r\n    /*\r\n    const allTodos = await API.graphql(graphqlOperation(queries.listMadens));\r\n    console.log(allTodos);\r\n\r\n    event.preventDefault();\r\n    */\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({\r\n      value : event.target.value\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"works\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Works </span>\r\n\r\n          {this.state.experiences.map(exp => {\r\n            return(\r\n              <div className=\"experience_element\">\r\n                <h3 className=\"element_heading\" key={exp.id}>{exp.title}</h3>\r\n                <TechList tech_list={exp.tech}/>\r\n                <p className=\"element_content\">{exp.content}</p>\r\n                <a href ={exp.git_url} className=\"experience_element_git_url\" target=\"_blank\">{exp.git_url}</a>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\nimport \"./Intro.css\"\r\n\r\nexport default class Intro extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      name : \"Lee Yeong-Min\",\r\n      job: \"Developer\",\r\n      email : \"demonic3540@naver.com\",\r\n      position: \"Student\",\r\n      blog: \"https://blog.naver.com/demonic3540\",\r\n      github : \"https://github.com/horoyoii\",\r\n      content: \"끊임없이 머리 속에 떠오르는 프로젝트들을 구현해내기 위하여 끊임없는 배움을 추구합니다. 비록 화려한 커리어는 없지만 높은 러닝 커브을 가지며... 나중에 써야겠다\"\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"Intro\">\r\n        <div className=\"lander\">\r\n          <div className=\"header-deco\"/>\r\n\r\n          <h1>{this.state.name}</h1>\r\n          <p className=\"sub_heading\">{this.state.job}</p>\r\n\r\n          <span className=\"sub_info\">github : <a href={this.state.github} target=\"_blank\">{this.state.github}</a></span>\r\n          <span className=\"sub_info\">blog : <a href={this.state.blog} target=\"_blank\" >{this.state.blog}</a></span>\r\n          <span className=\"sub_info\">email : <a href={this.state.email} target=\"_blank\">{this.state.email}</a></span>\r\n\r\n          <p className=\"intro_content\">{this.state.content}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\n\r\nimport './Experience.css'\r\n\r\nexport default class Experience extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      experiences: []\r\n    };\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n    /*\r\n    //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n    const allworks = await API.graphql(graphqlOperation(queries.listActivities));\r\n    let get_experiences = allworks['data']['listActivities']['items']\r\n    console.log(allworks['data']);\r\n    \r\n    this.setState({experiences : get_experiences})\r\n    */\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"experience\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Experience </span>\r\n        {this.state.experiences.map(act => {\r\n          return(\r\n            <div className=\"activity_element\">\r\n              <div className=\"activity-content\">\r\n                <h3 className=\"activity_heading\" key={act.id}>{act.title}</h3>\r\n                <div className=\"activity-subheading\">{act.subtitle}</div>\r\n                <p className=\"activity-content\">{act.content}</p>\r\n              </div>\r\n              <div className=\"activity_date\">\r\n                <span className=\"activity-text\">{act.period}</span>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\n\r\nimport './SkillSingleElement.css'\r\n\r\nexport default class SkillSingleElement extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n\r\n  }\r\n\r\n//   async componentDidMount() {\r\n//     //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n//     const allworks = await API.graphql(graphqlOperation(queries.listLanguages));\r\n//     let get_experiences = allworks['data']['listLanguages']['items']\r\n// //    console.log(allworks['data']);\r\n//\r\n//   }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"skill_element\">\r\n        <span className=\"skill_subheading\">{this.props.skill_name}</span>\r\n\r\n        {this.props.lang_list.map(tech =>{\r\n          return(\r\n              <a className=\"tech_element\">{tech}</a>\r\n          )\r\n        })}\r\n\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\nimport './Skills.css'\r\nimport SkillSingleElement from './SkillSingleElement'\r\n\r\nexport default class Skills extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      tmp_list: [],\r\n      back_list:[\"Django\", \"go-gin\"],\r\n      db_list:[\"MySQL\", \"MariaDB\", \"aws DynamoDB\", \"SQLite3\", \"Redis\",\"Firebase RT db\"],\r\n      front_list:[\"React\", \"QT5\"],\r\n      cloud_list:[\"aws Lamdba\", \"aws S3\", \"google app script\",\"aws AppSync\"],\r\n      etc_list:[\"docker-compose\", \"serverless framework\", \"GraphQL\"],\r\n      mobile_list:[\"Android\"]\r\n    };\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n    /*\r\n    const allworks = await API.graphql(graphqlOperation(queries.listLanguages));\r\n    let get_experiences = allworks['data']['listLanguages']['items']\r\n    console.log(allworks['data']);\r\n    console.log(get_experiences);\r\n\r\n    get_experiences.map(ex =>{\r\n      this.state.tmp_list.push(ex.title);\r\n    })\r\n    */\r\n    this.setState({lang_list : this.state.tmp_list})\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"experience\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Skills </span>\r\n        <SkillSingleElement skill_name=\"Language\" lang_list={this.state.tmp_list}/>\r\n        <SkillSingleElement skill_name=\"Backend\" lang_list={this.state.back_list}/>\r\n        <SkillSingleElement skill_name=\"Database\" lang_list={this.state.db_list}/>\r\n        <SkillSingleElement skill_name=\"Frontend\" lang_list={this.state.front_list}/>\r\n        <SkillSingleElement skill_name=\"Cloud Service\" lang_list={this.state.cloud_list}/>\r\n        <SkillSingleElement skill_name=\"Mobile\" lang_list={this.state.mobile_list}/>\r\n        <SkillSingleElement skill_name=\"ETC\" lang_list={this.state.etc_list}/>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\n\r\nimport './Visit.css'\r\nexport default class Visit extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      today : 0,\r\n      total : 0\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n    /*\r\n    const res = await API.graphql(graphqlOperation(queries.updateVisitors,  {\r\n    \"var\": {\r\n      \"id\": \"723e2b0d-8478-48f7-9802-cf1d38f7f303\"\r\n    }\r\n    }));\r\n\r\n    console.log(\"================\");\r\n    console.log(res['data']['updateVisitors']['m_today']);\r\n    console.log(res['data']['updateVisitors']['m_total']);\r\n\r\n    // get_experiences.map(ex =>{\r\n    //   this.state.tmp_list.push(ex.title);\r\n    // })\r\n    //\r\n    this.setState({\r\n      today : res['data']['updateVisitors']['m_today'],\r\n      total : res['data']['updateVisitors']['m_total']\r\n  })\r\n    */\r\n   \r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"Visit\">\r\n        <p>Today : {this.state.today} / Total : {this.state.total}</p>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\nimport './Works.css'\r\n\r\nimport TechList from './TechList'\r\n\r\nexport default class Test extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      experiences: []\r\n    };\r\n\r\n    this.handleChange =this.handleChange.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //componentDidMount에서는 DOM에 접근할 수 있습니다. 그래서 여기에서는 주로 AJAX 요청을 하거나, setTimeout, setInterval같은 행동\r\n    \r\n    const allworks = await API.graphql(graphqlOperation(queries.listTodos));\r\n    let get_experiences = allworks['data']['listTodos']['items']\r\n    console.log(allworks['data']);\r\n\r\n    this.setState({experiences : get_experiences})\r\n    \r\n  }\r\n\r\n  async updateName(event){\r\n\r\n    /*\r\n    const allTodos = await API.graphql(graphqlOperation(queries.listMadens));\r\n    console.log(allTodos);\r\n\r\n    event.preventDefault();\r\n    */\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({\r\n      value : event.target.value\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"works\">\r\n        <div className=\"subheader-deco\"/>\r\n        <span className=\"section_heading\">Test </span>\r\n\r\n          {this.state.experiences.map(exp => {\r\n            return(\r\n              <div className=\"experience_element\">\r\n                <h3 className=\"element_heading\" key={exp.id}>{exp.name}</h3>\r\n                <p className=\"element_content\">{exp.description}</p>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = `query GetTodo($id: ID!) {\n  getTodo(id: $id) {\n    id\n    name\n    description\n  }\n}\n`;\nexport const listTodos = `query ListTodos(\n  $filter: ModelTodoFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      name\n      description\n    }\n    nextToken\n  }\n}\n`;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Works from './containers/Works'\nimport Intro from './containers/Intro'\nimport TechList from './containers/TechList'\nimport Experience from './containers/Experience'\nimport Skills from './containers/Skills'\nimport Visit from './containers/Visit'\nimport Test from './containers/Test'\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Visit/>\n      <Intro/>\n      <Skills/>\n      <Works/>\n      <Experience/>\n      <Test/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-northeast-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://lypf62zedbgcbk3n6vbczlcs3a.appsync-api.ap-northeast-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"ap-northeast-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-snwmav6w5fe4zgkw4fmlnil6yi\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}