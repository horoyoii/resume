{"version":3,"sources":["logo.svg","containers/Skills.js","graphql/queries.js","App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["module","exports","Skills","props","state","name","email","value","handleChange","bind","event","API","graphql","graphqlOperation","allTodos","console","log","preventDefault","this","setState","target","onClick","updateName","type","onChange","Component","App","className","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,8OCKtBC,E,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAEDC,MAAQ,CACXC,KAAO,gBACPC,MAAQ,oBACRC,MAAQ,IAGV,EAAKC,aAAc,EAAKA,aAAaC,KAAlB,gBATH,E,iHAYDC,G,uFAEMC,MAAIC,QAAQC,2BCcT,2Q,ODdpBC,E,OACNC,QAAQC,IAAIF,GAEZJ,EAAMO,iB,qIAGOP,GACXQ,KAAKC,SAAS,CACZZ,MAAQG,EAAMU,OAAOb,U,+BAMvB,OACE,6BACE,uCACA,4BAAKW,KAAKd,MAAMC,MAChB,4BAAQgB,QAASH,KAAKI,WAAWb,KAAKS,OAAtC,UAEA,2BAAOK,KAAK,OAAOhB,MAAOW,KAAKd,MAAMG,MAAOiB,SAAUN,KAAKV,oB,GAnC/BiB,aEYrBC,MAVf,WACE,OACE,yBAAKC,UAAU,iBACb,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IASeC,EATG,CACd,mBAAsB,iBACtB,4BAA+B,sFAC/B,mBAAsB,iBACtB,+BAAkC,UAClC,mBAAsB,kCCE1BC,IAAQC,UAAUC,GAIlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aa19d3ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\r\n\r\nimport Amplify, { API, graphqlOperation } from 'aws-amplify';\r\nimport * as queries from '../graphql/queries';\r\n\r\nexport default class Skills extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      name : \"dafuault name\",\r\n      email : \"demonI@anaewf.com\",\r\n      value : ''\r\n    };\r\n\r\n    this.handleChange =this.handleChange.bind(this);\r\n  }\r\n\r\n  async updateName(event){\r\n\r\n  const allTodos = await API.graphql(graphqlOperation(queries.listExperiences));\r\n  console.log(allTodos);\r\n\r\n  event.preventDefault();\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({\r\n      value : event.target.value\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1>Skills </h1>\r\n        <h2>{this.state.name}</h2>\r\n        <button onClick={this.updateName.bind(this)}>Update</button>\r\n\r\n        <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n      </div>\r\n    )\r\n  };\r\n}\r\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getWorks = `query GetWorks {\n  getWorks {\n    id\n    title\n    content\n  }\n}\n`;\nexport const getWork = `query GetWork($id: ID!) {\n  getWork(id: $id) {\n    id\n    title\n    content\n  }\n}\n`;\nexport const listWorks = `query ListWorks(\n  $filter: TableWorkFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listWorks(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n      content\n    }\n    nextToken\n  }\n}\n`;\nexport const listExperiences = `query ListExperiences(\n  $filter: TableExperienceFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listExperiences(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      title\n      content\n    }\n    nextToken\n  }\n}\n`;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Skills from './containers/Skills'\n\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Skills/>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-northeast-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://ddcya4nikncsfgizfynnfd3cm4.appsync-api.ap-northeast-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"ap-northeast-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-25eospxngzeijctl5qqaavxv2i\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}